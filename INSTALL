0) General Information
======================

This program uses wxFormBuilder to generate its user interface, so if you
want to make any UI changes, install wxFormBuilder and open tline.fbp.
After making your changes, type F8 in wxFormBuilder to regenerate the
tlineUI.h and tlineUI.cpp files.

Development of Tline is done under Linux.  I also use Linux to cross-compile
for Windows.

tline is reasonably self-contained, but it does use gnuplot for graphing,
so you will need gnuplot installed somewhere accessible by your shell.  The
Tline windows installer includes gnuplot, and will install it on request.

1) BUILDING FOR LINUX
=====================

1a) Manual Builds
=================

Compilation for Linux can be done by the following steps:

1) mkdir build-linux
2) cd build-linux
3) cmake ..
4) make

If you have a multi-core CPU, you can speed up the compilation by replacing
step 4 above with "make -jN" where N is number of CPU cores available.

If you need to see the full text of the commands being executed by "make", add
VERBOSE=1 to the command.  For example, to produce a verbose build, with 12
CPU cores available, step 4 would be:

make -j12 VERBOSE=1

This will result in the tline binary being created as "build-linux/tline".
You will need to have a development version of wxWidgets installed to perform
the build.  On Fedora Linux this is provided by the wxGTK3-devel package.

1b) RPM builds
==============

Fedora users can use the spec/tline.spec file to generate an RPM as follows:

First, create a source archive.  Note that the "TAG=x.x.x" must be changed
to match the version in the spec file, and that has to match a tag in git.

TAG=0.0.7
git archive --format=tar.gz --prefix=tline-${TAG}/ -o ~/tline-${TAG}.tar.gz tags/${TAG}

Next, prepare a working directory:

mkdir -p ~/rpmbuild/{SPECS,SOURCES}
cp spec/tline.spec ~/rpmbuild/SPECS
mv ~/tline-${TAG}.tar.gz ~/rpmbuild/SOURCES
cd ~/rpmbuild

Now, run the build:

rpmbuild -ba SPECS/tline.spec

1c) MOCK builds

If you are set up for it on Fedora, you could instead use mock, again
adjusting the version string and target Fedora version as necessary.  In
this case, you first generate the sourc RPM in your local rpmbuild
directory, then pass that to mock:

TAG=0.0.7
git archive --format=tar.gz --prefix=tline-${TAG}/ -o ~/tline-${TAG}.tar.gz tags/${TAG}
mkdir -p ~/rpmbuild/{SPECS,SOURCES}
cp spec/tline.spec ~/rpmbuild/SPECS
mv ~/tline-${TAG}.tar.gz ~/rpmbuild/SOURCES
cd ~/rpmbuild
rpmbuild -bs SPECS/tline.spec
mock -r fedora-30-x86_64 --rebuild ~/rpmbuild/SRPMS/tline-${TAG}-1.fc30.src.rpm

2) BUILDING FOR WINDOWS
=======================

The windows version of TLine is built using the MinGW cross-compilers running
on a Fedora Linux machine.  Also, the NSIS installer is used.  Therefore,
you will want to install mingw32-wxWidgets3.noarch, mingw32-nsis.x86_64, etc.

Also, Tline for windows uses a number of dlls from various projects.  The dll
files are stored in the windows-installer subdirectory.

First, build the Tline.exe file and copy it into the windows-installer
directory:

1) mkdir build-windows
2) cd build-windows
3) mingw32-cmake ..
4) make -j12 && cp tline.exe ../windows-installer

Generate the windows package:

cd ../windows-installer
makensis tline.nsi

You will wind up with tline-installer.exe, which contains all the components
needed to install and run Tline.

